[tool.poetry]
name = "mpf"
version = "0.1.0"
description = "Analysis of Missing Persons Footwear"
authors = ["Brian Cohan <briancohan@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
google-api-python-client = "^2.125.0"
google-auth-httplib2 = "^0.2.0"
google-auth-oauthlib = "^1.2.0"
pandas = "^2.2.1"
plotly = "^5.20.0"
python-dotenv = "^1.0.1"
kaleido = "0.2"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
ipykernel = "^6.29.4"
nbformat = "^5.10.3"
mypy = "^1.9.0"
pytest = "^8.1.1"
pytest-datadir = "^1.5.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "B", # flake8-bugbear
    "C", # Pylint-Convention
    # "D", # pydocstyle
    "COM", # flake8-commas
    "E", # pycodestyle - Error
    "F", # Pyflakes
    "I", # isort
    "N", # pep8-naming
    "S", # flake8-bandit
    "UP", # pyupgrade
    "W", # pycodestyle - Warning
]
ignore = [
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "COM812", # missing-trailing-comma
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring (conflicts with D211)
    "D213", # Multi-line docstring symmary should start at the second line (conflicts with D212)
    "D301", # Use r if any backslashes in a docstring
    "E203", # Whitespace before ':'
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.mypy]
ignore_missing_imports = true
